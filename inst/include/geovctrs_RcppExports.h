// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_geovctrs_RCPPEXPORTS_H_GEN_
#define RCPP_geovctrs_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace geovctrs {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("geovctrs", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("geovctrs", "_geovctrs_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in geovctrs");
            }
        }
    }

    inline SEXP geovctrs_cpp_convert(SEXP data, SEXP ptype) {
        typedef SEXP(*Ptr_geovctrs_cpp_convert)(SEXP,SEXP);
        static Ptr_geovctrs_cpp_convert p_geovctrs_cpp_convert = NULL;
        if (p_geovctrs_cpp_convert == NULL) {
            validateSignature("SEXP(*geovctrs_cpp_convert)(SEXP,SEXP)");
            p_geovctrs_cpp_convert = (Ptr_geovctrs_cpp_convert)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_convert");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_convert(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline NumericVector pmin2(NumericVector x1, NumericVector x2) {
        typedef SEXP(*Ptr_pmin2)(SEXP,SEXP);
        static Ptr_pmin2 p_pmin2 = NULL;
        if (p_pmin2 == NULL) {
            validateSignature("NumericVector(*pmin2)(NumericVector,NumericVector)");
            p_pmin2 = (Ptr_pmin2)R_GetCCallable("geovctrs", "_geovctrs_pmin2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pmin2(Shield<SEXP>(Rcpp::wrap(x1)), Shield<SEXP>(Rcpp::wrap(x2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector pmax2(NumericVector x1, NumericVector x2) {
        typedef SEXP(*Ptr_pmax2)(SEXP,SEXP);
        static Ptr_pmax2 p_pmax2 = NULL;
        if (p_pmax2 == NULL) {
            validateSignature("NumericVector(*pmax2)(NumericVector,NumericVector)");
            p_pmax2 = (Ptr_pmax2)R_GetCCallable("geovctrs", "_geovctrs_pmax2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pmax2(Shield<SEXP>(Rcpp::wrap(x1)), Shield<SEXP>(Rcpp::wrap(x2)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline SEXP geovctrs_cpp_envelope(SEXP data, bool naRm) {
        typedef SEXP(*Ptr_geovctrs_cpp_envelope)(SEXP,SEXP);
        static Ptr_geovctrs_cpp_envelope p_geovctrs_cpp_envelope = NULL;
        if (p_geovctrs_cpp_envelope == NULL) {
            validateSignature("SEXP(*geovctrs_cpp_envelope)(SEXP,bool)");
            p_geovctrs_cpp_envelope = (Ptr_geovctrs_cpp_envelope)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_envelope");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_envelope(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(naRm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP geovctrs_cpp_bbox(SEXP data, bool naRm) {
        typedef SEXP(*Ptr_geovctrs_cpp_bbox)(SEXP,SEXP);
        static Ptr_geovctrs_cpp_bbox p_geovctrs_cpp_bbox = NULL;
        if (p_geovctrs_cpp_bbox == NULL) {
            validateSignature("SEXP(*geovctrs_cpp_bbox)(SEXP,bool)");
            p_geovctrs_cpp_bbox = (Ptr_geovctrs_cpp_bbox)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_bbox");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_bbox(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(naRm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline LogicalVector geovctrs_cpp_has_missing(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_has_missing)(SEXP);
        static Ptr_geovctrs_cpp_has_missing p_geovctrs_cpp_has_missing = NULL;
        if (p_geovctrs_cpp_has_missing == NULL) {
            validateSignature("LogicalVector(*geovctrs_cpp_has_missing)(SEXP)");
            p_geovctrs_cpp_has_missing = (Ptr_geovctrs_cpp_has_missing)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_has_missing");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_has_missing(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector geovctrs_cpp_is_finite(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_is_finite)(SEXP);
        static Ptr_geovctrs_cpp_is_finite p_geovctrs_cpp_is_finite = NULL;
        if (p_geovctrs_cpp_is_finite == NULL) {
            validateSignature("LogicalVector(*geovctrs_cpp_is_finite)(SEXP)");
            p_geovctrs_cpp_is_finite = (Ptr_geovctrs_cpp_is_finite)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_is_finite");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_is_finite(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector geovctrs_cpp_is_empty(SEXP data) {
        typedef SEXP(*Ptr_geovctrs_cpp_is_empty)(SEXP);
        static Ptr_geovctrs_cpp_is_empty p_geovctrs_cpp_is_empty = NULL;
        if (p_geovctrs_cpp_is_empty == NULL) {
            validateSignature("LogicalVector(*geovctrs_cpp_is_empty)(SEXP)");
            p_geovctrs_cpp_is_empty = (Ptr_geovctrs_cpp_is_empty)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_is_empty");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_is_empty(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline CharacterVector geovctrs_cpp_parse(SEXP data) {
        typedef SEXP(*Ptr_geovctrs_cpp_parse)(SEXP);
        static Ptr_geovctrs_cpp_parse p_geovctrs_cpp_parse = NULL;
        if (p_geovctrs_cpp_parse == NULL) {
            validateSignature("CharacterVector(*geovctrs_cpp_parse)(SEXP)");
            p_geovctrs_cpp_parse = (Ptr_geovctrs_cpp_parse)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_parse");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_parse(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<CharacterVector >(rcpp_result_gen);
    }

    inline IntegerVector geovctrs_cpp_get_srid(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_get_srid)(SEXP);
        static Ptr_geovctrs_cpp_get_srid p_geovctrs_cpp_get_srid = NULL;
        if (p_geovctrs_cpp_get_srid == NULL) {
            validateSignature("IntegerVector(*geovctrs_cpp_get_srid)(SEXP)");
            p_geovctrs_cpp_get_srid = (Ptr_geovctrs_cpp_get_srid)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_get_srid");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_get_srid(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline SEXP geovctrs_cpp_set_srid(SEXP x, IntegerVector srid) {
        typedef SEXP(*Ptr_geovctrs_cpp_set_srid)(SEXP,SEXP);
        static Ptr_geovctrs_cpp_set_srid p_geovctrs_cpp_set_srid = NULL;
        if (p_geovctrs_cpp_set_srid == NULL) {
            validateSignature("SEXP(*geovctrs_cpp_set_srid)(SEXP,IntegerVector)");
            p_geovctrs_cpp_set_srid = (Ptr_geovctrs_cpp_set_srid)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_set_srid");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_set_srid(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(srid)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline IntegerVector geovctrs_cpp_geom_type_id(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_geom_type_id)(SEXP);
        static Ptr_geovctrs_cpp_geom_type_id p_geovctrs_cpp_geom_type_id = NULL;
        if (p_geovctrs_cpp_geom_type_id == NULL) {
            validateSignature("IntegerVector(*geovctrs_cpp_geom_type_id)(SEXP)");
            p_geovctrs_cpp_geom_type_id = (Ptr_geovctrs_cpp_geom_type_id)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_geom_type_id");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_geom_type_id(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector geovctrs_cpp_n_geometries(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_n_geometries)(SEXP);
        static Ptr_geovctrs_cpp_n_geometries p_geovctrs_cpp_n_geometries = NULL;
        if (p_geovctrs_cpp_n_geometries == NULL) {
            validateSignature("IntegerVector(*geovctrs_cpp_n_geometries)(SEXP)");
            p_geovctrs_cpp_n_geometries = (Ptr_geovctrs_cpp_n_geometries)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_n_geometries");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_n_geometries(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector geovctrs_cpp_n_coordinates(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_n_coordinates)(SEXP);
        static Ptr_geovctrs_cpp_n_coordinates p_geovctrs_cpp_n_coordinates = NULL;
        if (p_geovctrs_cpp_n_coordinates == NULL) {
            validateSignature("IntegerVector(*geovctrs_cpp_n_coordinates)(SEXP)");
            p_geovctrs_cpp_n_coordinates = (Ptr_geovctrs_cpp_n_coordinates)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_n_coordinates");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_n_coordinates(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector geovctrs_cpp_coordinate_dimensions(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_coordinate_dimensions)(SEXP);
        static Ptr_geovctrs_cpp_coordinate_dimensions p_geovctrs_cpp_coordinate_dimensions = NULL;
        if (p_geovctrs_cpp_coordinate_dimensions == NULL) {
            validateSignature("IntegerVector(*geovctrs_cpp_coordinate_dimensions)(SEXP)");
            p_geovctrs_cpp_coordinate_dimensions = (Ptr_geovctrs_cpp_coordinate_dimensions)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_coordinate_dimensions");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_coordinate_dimensions(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline SEXP geovctrs_cpp_first_coordinate(SEXP x) {
        typedef SEXP(*Ptr_geovctrs_cpp_first_coordinate)(SEXP);
        static Ptr_geovctrs_cpp_first_coordinate p_geovctrs_cpp_first_coordinate = NULL;
        if (p_geovctrs_cpp_first_coordinate == NULL) {
            validateSignature("SEXP(*geovctrs_cpp_first_coordinate)(SEXP)");
            p_geovctrs_cpp_first_coordinate = (Ptr_geovctrs_cpp_first_coordinate)R_GetCCallable("geovctrs", "_geovctrs_geovctrs_cpp_first_coordinate");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_geovctrs_cpp_first_coordinate(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_geovctrs_RCPPEXPORTS_H_GEN_
